{
	"name": "rkp_workflow",
	"properties": {
		"folder": {
			"name": "New folder"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "sourceDatasetJson",
						"type": "DatasetReference"
					},
					"name": "loadData"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "destinationDatasetParquet",
						"type": "DatasetReference"
					},
					"name": "sinkAsParquetsink1"
				}
			],
			"transformations": [
				{
					"name": "decodeBodyfromBase64derivedColumn1"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          EnqueuedTimeUtc as string,",
				"          Properties as ({} as string),",
				"          SystemProperties as (connectionDeviceId as string, connectionAuthMethod as string, connectionDeviceGenerationId as string, enqueuedTime as string),",
				"          Body as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine',",
				"     wildcardPaths:['00/2022/2022/01/01/**/*.json']) ~> loadData",
				"loadData derive(BodyContent = fromBase64(Body)) ~> decodeBodyfromBase64derivedColumn1",
				"decodeBodyfromBase64derivedColumn1 select(mapColumn(",
				"          EnqueuedTimeUtc,",
				"          SystemProperties = SystemProperties.connectionDeviceId,",
				"          connectionAuthMethod = SystemProperties.connectionAuthMethod,",
				"          connectionDeviceGenerationId = SystemProperties.connectionDeviceGenerationId,",
				"          enqueuedTime = SystemProperties.enqueuedTime,",
				"          BodyContent",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ts as string,",
				"          topicName as string,",
				"          connectionDeviceId as string,",
				"          connectionAuthMethod as string,",
				"          connectionDeviceGenerationId as string,",
				"          enqueuedTime as string,",
				"          BAG1_opMode as string,",
				"          BAGbetriebsbereit as string,",
				"          Ch1_LineContent as string,",
				"          Ch1_ProgPfadName as string,",
				"          Ch1_ToolIdent as string,",
				"          Ch1_actSpeed_S1 as string,",
				"          E_ChanActive as string,",
				"          E_ProgRunn as string,",
				"          E_ProgStop as string,",
				"          E_ProgWait as string,",
				"          E_ProgrAborted as string,",
				"          GesSummeWerkstuecke as string,",
				"          GeslaufzeitProg as string,",
				"          Ist_Werkstueckzahl as string,",
				"          LZeitaktProgramm as string,",
				"          NCKPrgzustand as string,",
				"          Soll_Werkstueckzahl as string,",
				"          Spindeloverride as string,",
				"          Vorschuboverride as string,",
				"          WerkzeugEingrZeit as string,",
				"          actProgNetTime as string,",
				"          ncProgEndCounter as string,",
				"          ncStartCounter as string,",
				"          oldProgNetTime as string",
				"     ),",
				"     format: 'parquet',",
				"     partitionFileNames:['Januaryday1[n]'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1),",
				"     preCommands: [],",
				"     postCommands: []) ~> sinkAsParquetsink1"
			]
		}
	}
}