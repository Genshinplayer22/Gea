{
	"name": "11111",
	"properties": {
		"folder": {
			"name": "New folder"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Hour",
						"type": "DatasetReference"
					},
					"name": "loadData"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Parquet1",
						"type": "DatasetReference"
					},
					"name": "sinkAsParquetsink1"
				}
			],
			"transformations": [
				{
					"name": "decodeBodyfromBase64derivedColumn1"
				},
				{
					"name": "parseFromBodyparse1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          EnqueuedTimeUtc as string,",
				"          Properties as ({} as string),",
				"          SystemProperties as (connectionDeviceId as string, connectionAuthMethod as string, connectionDeviceGenerationId as string, enqueuedTime as string),",
				"          Body as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> loadData",
				"loadData derive(Body = fromBase64(Body)) ~> decodeBodyfromBase64derivedColumn1",
				"decodeBodyfromBase64derivedColumn1 parse(BodyContent = Body ? (schemaId as string,\r",
				"     ts as string,\r",
				"     E_ProgRunn as boolean,\r",
				"     E_ProgWait as boolean,\r",
				"     Ch1_ProgPfadName as string,\r",
				"     {JobName.value} as string,\r",
				"     BAG1_opMode as integer)[],",
				"     format: 'json',",
				"     documentForm: 'arrayOfDocuments') ~> parseFromBodyparse1",
				"parseFromBodyparse1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ts as string,",
				"          topicName as string,",
				"          E_ProgRunn as boolean,",
				"          E_ProgWait as boolean,",
				"          E_ProgStop as boolean,",
				"          E_ProgrAborted as boolean,",
				"          E_ChanActive as boolean,",
				"          Ch1_ProgPfadName as string,",
				"          Ch1_LineContent as string,",
				"          Ch1_ToolIdent as string,",
				"          Ist_Werkstueckzahl as integer,",
				"          Soll_Werkstueckzahl as integer,",
				"          GesSummeWerkstuecke as integer,",
				"          Vorschuboverride as integer,",
				"          Spindeloverride as integer,",
				"          Ch1_actSpeed_S1 as integer,",
				"          ncProgEndCounter as integer,",
				"          ncStartCounter as integer,",
				"          WerkzeugEingrZeit as integer,",
				"          LZeitaktProgramm as integer,",
				"          GeslaufzeitProg as integer,",
				"          actProgNetTime as integer,",
				"          oldProgNetTime as integer,",
				"          NCKPrgzustand as integer,",
				"          BAGbetriebsbereit as integer,",
				"          BAG1_opMode as integer,",
				"          connectionAuthMethod as string,",
				"          connectionDeviceGenerationId as long,",
				"          enqueuedTime as string,",
				"          connectionDeviceId as string",
				"     ),",
				"     format: 'parquet',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     preCommands: [],",
				"     postCommands: []) ~> sinkAsParquetsink1"
			]
		}
	}
}