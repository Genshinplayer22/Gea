{
	"name": "rkp",
	"properties": {
		"folder": {
			"name": "New folder"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "AzureBlobStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "source2"
				},
				{
					"linkedService": {
						"referenceName": "AzureBlobStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "source3"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "destinationDatasetCSV",
						"type": "DatasetReference"
					},
					"name": "sink1",
					"rejectedDataLinkedService": {
						"referenceName": "AzureBlobStorage1",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "select2"
				},
				{
					"name": "MapDrifted2",
					"description": "Creates an explicit mapping for each drifted column"
				},
				{
					"name": "select3"
				}
			],
			"scriptLines": [
				"source(output(",
				"          BAG1_opMode as short,",
				"          Body as string,",
				"          Ch1_LineContent as string,",
				"          Ch1_ProgPfadName as string,",
				"          Ch1_TollIdent as string,",
				"          Ch1_actSpeed_S1 as boolean,",
				"          E_ProgRunn as boolean,",
				"          E_ProgWait as boolean,",
				"          Eilgangoverride as short,",
				"          EnqueuedTimeUtc as string,",
				"          Spindeloverride as short,",
				"          SystemProperties as (connectionAuthMethod as string, connectionDeviceGenerationId as long, connectionDeviceId as string, enqueuedTime as string),",
				"          Vorschuboverride as short,",
				"          actProgNetTime as short,",
				"          ncStartCounter as short,",
				"          schemaId as string,",
				"          ts as string",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'json',",
				"     container: 'machinedata',",
				"     documentForm: 'documentPerLine',",
				"     wildcardPaths:['00/2022/2022/01/01/00/*.json'],",
				"     partitionBy('roundRobin', 2)) ~> source2",
				"source(output(",
				"          BAG1_opMode as short,",
				"          Body as string,",
				"          Ch1_LineContent as string,",
				"          Ch1_ProgPfadName as string,",
				"          Ch1_TollIdent as string,",
				"          Ch1_actSpeed_S1 as boolean,",
				"          E_ProgRunn as boolean,",
				"          E_ProgWait as boolean,",
				"          Eilgangoverride as short,",
				"          EnqueuedTimeUtc as string,",
				"          Spindeloverride as short,",
				"          SystemProperties as (connectionAuthMethod as string, connectionDeviceGenerationId as long, connectionDeviceId as string, enqueuedTime as string),",
				"          Vorschuboverride as short,",
				"          actProgNetTime as short,",
				"          ncStartCounter as short,",
				"          schemaId as string,",
				"          ts as string",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     ignoreNoFilesFound: false,",
				"     format: 'json',",
				"     container: 'machinedata',",
				"     documentForm: 'documentPerLine',",
				"     wildcardPaths:['00/2022/2022/01/01/00/*.json'],",
				"     partitionBy('roundRobin', 2)) ~> source3",
				"MapDrifted2 select(skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"source3 derive(BAG1_opMode = toString(byName('BAG1_opMode')),",
				"          Body = toString(byName('Body')),",
				"          Ch1_LineContent = toString(byName('Ch1_LineContent')),",
				"          Ch1_ProgPfadName = toString(byName('Ch1_ProgPfadName')),",
				"          Ch1_TollIdent = toString(byName('Ch1_TollIdent')),",
				"          Ch1_actSpeed_S1 = toString(byName('Ch1_actSpeed_S1')),",
				"          E_ProgRunn = toString(byName('E_ProgRunn')),",
				"          E_ProgWait = toString(byName('E_ProgWait')),",
				"          Eilgangoverride = toString(byName('Eilgangoverride')),",
				"          EnqueuedTimeUtc = toString(byName('EnqueuedTimeUtc')),",
				"          Spindeloverride = toString(byName('Spindeloverride')),",
				"          Vorschuboverride = toString(byName('Vorschuboverride')),",
				"          actProgNetTime = toString(byName('actProgNetTime')),",
				"          ncStartCounter = toString(byName('ncStartCounter')),",
				"          schemaId = toString(byName('schemaId')),",
				"          ts = toString(byName('ts'))) ~> MapDrifted2",
				"source2 select(mapColumn(",
				"          BAG1_opMode,",
				"          Body,",
				"          Ch1_LineContent,",
				"          Ch1_ProgPfadName,",
				"          Ch1_TollIdent,",
				"          Ch1_actSpeed_S1,",
				"          E_ProgRunn,",
				"          E_ProgWait,",
				"          Eilgangoverride,",
				"          EnqueuedTimeUtc,",
				"          Spindeloverride,",
				"          connectionAuthMehtod = SystemProperties.connectionAuthMethod,",
				"          connectionDeviceGenerationId = SystemProperties.connectionDeviceGenerationId,",
				"          connectionDeviceId = SystemProperties.connectionDeviceId,",
				"          enqueuedTime = SystemProperties.enqueuedTime,",
				"          Vorschuboverride,",
				"          actProgNetTime,",
				"          ncStartCounter,",
				"          schemaId,",
				"          ts",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"select3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('roundRobin', 2)) ~> sink1"
			]
		}
	}
}